// Generated by CoffeeScript 1.7.1

/*
deepscan
v0.12345
asifjahmed
 */

(function() {
  var PlaySound, clientSelected, doubleDigit, getclient, getpacketrate, getssid, gettime, renderGrids, ssidSelected, timeConverter, toggleRecentOnly;

  $(document).ready(function() {
    var socket;
    socket = io.connect();
    socket.on('ssid', getssid);
    socket.on('client', getclient);
    socket.on('time', gettime);
    socket.on('packetrate', getpacketrate);
    $('#enablerecentonly').change(function() {
      return toggleRecentOnly();
    });
    return renderGrids();
  });

  timeConverter = function(unixtime) {
    var a, hour, min, sec;
    a = new Date(unixtime * 1000);
    hour = a.getHours();
    min = a.getMinutes();
    sec = a.getSeconds();
    return "" + hour + ":" + (doubleDigit(min)) + ":" + (doubleDigit(sec));
  };

  doubleDigit = function(n) {
    if (n > 9) {
      return "" + n;
    } else {
      return "0" + n;
    }
  };

  getssid = function(data) {
    var ssidexists;
    if ($('#ssidalert').val() === data.mac) {
      if ($('#enablessidsound').prop('checked')) {
        PlaySound('sound1');
        $("#ssidalertflasher").fadeIn(50).fadeOut(50);
      }
    }
    ssidexists = $('#ssidgrid').getCell(data.mac, 'mac');
    if (ssidexists) {
      return $('#ssidgrid').setRowData(data.mac, {
        ssid: data.ssid.trim() === '' ? '- hidden ssid -' : data.ssid,
        mac: data.mac,
        type: data.type,
        lasttime: timeConverter(data.lasttime),
        manuf: data.manuf,
        channel: data.channel,
        signal_dbm: data.signal_dbm
      });
    } else {
      return $('#ssidgrid').addRowData(data.mac, {
        ssid: data.ssid.trim() === '' ? '- hidden ssid -' : data.ssid,
        mac: data.mac,
        type: data.type,
        lasttime: timeConverter(data.lasttime),
        manuf: data.manuf,
        channel: data.channel,
        signal_dbm: data.signal_dbm
      });
    }
  };

  getclient = function(data) {
    var clientexists;
    if ($('#clientalert').val() === data.mac) {
      if ($('#enableclientsound').prop('checked')) {
        PlaySound('sound1');
        $("#clientalertflasher").fadeIn(50).fadeOut(50);
      }
    }
    clientexists = $('#clientgrid').getCell(data.mac, 'mac');
    if (clientexists) {
      return $('#clientgrid').setRowData(data.mac, {
        name: data.name,
        bssid: data.bssid === data.mac ? '- self -' : data.bssid,
        bssidsrc: $('#ssidgrid').getRowData(data.bssid).ssid === void 0 ? '' : $('#ssidgrid').getRowData(data.bssid).ssid,
        manuf: data.manuf,
        mac: data.mac,
        type: data.type,
        lasttime: timeConverter(data.lasttime),
        signal_dbm: data.signal_dbm,
        datasize: data.datasize,
        ppm: data.ppm,
        username: data.username,
        channel: data.channel
      });
    } else {
      return $('#clientgrid').addRowData(data.mac, {
        name: data.name,
        bssid: data.bssid === data.mac ? '- self -' : data.bssid,
        bssidsrc: $('#ssidgrid').getRowData(data.bssid).ssid === void 0 ? '' : $('#ssidgrid').getRowData(data.bssid).ssid,
        manuf: data.manuf,
        mac: data.mac,
        type: data.type,
        lasttime: timeConverter(data.lasttime),
        signal_dbm: data.signal_dbm,
        datasize: data.datasize,
        ppm: data.ppm,
        username: data.username,
        channel: data.channel
      });
    }
  };

  gettime = function(data) {
    return $('#txtTime').val(timeConverter(data.timesec));
  };

  getpacketrate = function(data) {
    if ($('#clientgrid').getRowData(data.mac) !== void 0) {
      if (data.ppm === 0 && $('#enablerecentonly').prop('checked')) {
        return $('#clientgrid').delRowData(data.mac);
      } else {
        return $('#clientgrid').setCell(data.mac, 'ppm', data.ppm);
      }
    }
  };

  renderGrids = function() {
    $("#ssidgrid").jqGrid({
      datatype: "local",
      width: 650,
      height: 600,
      colNames: ["ssid", "mac", "manufacturer", "type", "last seen", "channel", "dBm"],
      colModel: [
        {
          name: "ssid",
          index: "ssid",
          sorttype: "text",
          width: 90
        }, {
          name: "mac",
          index: "mac",
          sorttype: "text",
          key: true,
          width: 65
        }, {
          name: "manuf",
          index: "manuf",
          sorttype: "text",
          width: 60
        }, {
          name: "type",
          index: "type",
          sorttype: "int",
          width: 35
        }, {
          name: "lasttime",
          index: "lasttime",
          sorttype: "time",
          width: 40
        }, {
          name: "channel",
          index: "channel",
          sorttype: "int",
          width: 30
        }, {
          name: "signal_dbm",
          index: "signal_dbm",
          sorttype: "int",
          width: 20
        }
      ],
      pager: "#ssidpager",
      rowNum: 200,
      sortname: "lasttime",
      viewrecords: true,
      sortorder: "desc",
      caption: "ssid",
      onSelectRow: ssidSelected,
      beforeSelectRow: function(rowid) {
        if ($(this).jqGrid("getGridParam", "selrow") === rowid) {
          $(this).jqGrid("resetSelection");
          $("#ssidalert").val("");
          return false;
        } else {
          return true;
        }
      }
    });
    $("#ssidgrid").jqGrid("navGrid", "#ssidpager", {
      del: false,
      add: false,
      edit: false,
      search: false
    });
    $("#ssidgrid").jqGrid("filterToolbar", {
      stringResult: true,
      searchOnEnter: false
    });
    $("#clientgrid").jqGrid({
      datatype: "local",
      width: 900,
      height: 600,
      colNames: ["name", "mac", "manufacturer", "bssid", "bssid src", "type", "last seen", "ppm", "interface", "channel", "dBm", "data size"],
      colModel: [
        {
          name: "name",
          index: "name",
          sorttype: "text",
          width: 60
        }, {
          name: "mac",
          index: "mac",
          sorttype: "text",
          key: true,
          width: 60
        }, {
          name: "manuf",
          index: "manuf",
          sorttype: "text",
          width: 60
        }, {
          name: "bssid",
          index: "bssid",
          sorttype: "text",
          width: 60
        }, {
          name: "bssidsrc",
          index: "bssidsrc",
          sorttype: "text",
          width: 90
        }, {
          name: "type",
          index: "type",
          sorttype: "int",
          width: 35
        }, {
          name: "lasttime",
          index: "lasttime",
          sorttype: "time",
          width: 35
        }, {
          name: "ppm",
          index: "ppm",
          sorttype: "int",
          width: 20
        }, {
          name: "username",
          index: "username",
          sorttype: "text",
          width: 30
        }, {
          name: "channel",
          index: "channel",
          sorttype: "int",
          width: 30
        }, {
          name: "signal_dbm",
          index: "signal_dbm",
          sorttype: "int",
          width: 20
        }, {
          name: "datasize",
          index: "datasize",
          sorttype: "int",
          width: 30
        }
      ],
      pager: "#clientpager",
      rowNum: 200,
      sortname: "lasttime",
      viewrecords: true,
      sortorder: "desc",
      caption: "client",
      onSelectRow: clientSelected,
      beforeSelectRow: function(rowid) {
        if ($(this).jqGrid("getGridParam", "selrow") === rowid) {
          $(this).jqGrid("resetSelection");
          $("#clientalert").val("");
          return false;
        } else {
          return true;
        }
      }
    });
    $("#clientgrid").jqGrid("navGrid", "#clientpager", {
      del: false,
      add: false,
      edit: false,
      search: false
    });
    return $("#clientgrid").jqGrid("filterToolbar", {
      stringResult: true,
      searchOnEnter: false
    });
  };

  ssidSelected = function(obj) {
    $('#clientgrid').resetSelection();
    return $('#ssidalert').val(obj);
  };

  clientSelected = function(obj) {
    $('#ssidgrid').resetSelection();
    return $('#clientalert').val(obj);
  };

  PlaySound = function(sound) {
    return $("#" + sound)[0].play();
  };

  toggleRecentOnly = function() {
    var data, recentonly, x, _i, _len;
    recentonly = $("#enablerecentonly").prop('checked');
    if (recentonly) {
      data = $('#clientgrid').getDataIDs();
      x = 0;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        x = data[_i];
        if ($('#clientgrid').getCell(x, 'ppm') === 0) {
          $('#clientgrid').delRowData(x);
        }
      }
      return data.length = 0;
    }
  };

}).call(this);
